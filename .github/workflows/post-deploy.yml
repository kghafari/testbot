name: 🔍Post Deployment Check

on:
  deployment_status:

# setting GH_TOKEN for the entire workflow
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write # Allows for creating/editing releases
  deployments: write # If you're using deployment tracking as well
  pull-requests: read # If working with PR data

jobs:
  generate-release-sha-diff:
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'dev' &&
      github.event.deployment_status.state == 'success'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current beta SHA
        id: beta_sha
        run: |
          echo "sha=${{ github.event.deployment.sha }}" >> "$GITHUB_OUTPUT"

      - name: Get last prod release tag
        id: last_prod_tag
        run: |
          # Get the latest published (non-draft) release tag
          tag=$(gh release list --json name,isLatest --jq '.[] | select(.isLatest)|.name')
          echo "tag=$tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Resolve tag to SHA
        id: prod_sha
        run: |
          sha=$(git rev-list -n 1 ${{ steps.last_prod_tag.outputs.tag }})
          echo "sha=$sha"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Display info (optional)
        run: |
          echo "🟢 Last prod release: ${{ steps.last_prod_tag.outputs.tag }} -> ${{ steps.prod_sha.outputs.sha }}"
          echo "🟡 Current beta SHA: ${{ steps.beta_sha.outputs.sha }}"

      - name: Generate and Append Release Notes
        id: generate_release_notes
        run: |
          # Inputs
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          NEW_TAG="v-next"

          echo "📌 Generating release notes from $LAST_PROD_TAG to $BETA_SHA"

          # Get list of commits between prod and beta (ancestry path for clean history)
          COMMITS=$(git log --pretty=format:"%H" --no-merges --first-parent --ancestry-path "$LAST_PROD_TAG..$BETA_SHA")

          echo "🔍 Found commits:"
          echo "$COMMITS"

          # Initialize PR-based changelog
          RELEASE_NOTES="# Changelog from $LAST_PROD_TAG to $BETA_SHA\n\n"

          for COMMIT in $COMMITS; do
            echo "🔎 Checking PR for commit $COMMIT"

            # Get associated PR (if any)
            PR_JSON=$(gh pr list --search "$COMMIT" --state merged --json number,title,author --limit 1)

            if [[ $(echo "$PR_JSON" | jq length) -gt 0 ]]; then
              PR_NUM=$(echo "$PR_JSON" | jq -r '.[0].number')
              PR_TITLE=$(echo "$PR_JSON" | jq -r '.[0].title')
              PR_AUTHOR=$(echo "$PR_JSON" | jq -r '.[0].author.login')

              RELEASE_NOTES+="- [#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM}): ${PR_TITLE} (by @${PR_AUTHOR})\n"
            else
              COMMIT_MSG=$(git log -1 --pretty=format:"%s" "$COMMIT")
              SHORT_SHA=$(echo "$COMMIT" | cut -c1-7)

              RELEASE_NOTES+="- ${SHORT_SHA}: ${COMMIT_MSG}\n"
            fi
          done

          echo -e "$RELEASE_NOTES" > release_notes.md
          echo "📝 Generated release notes:"
          cat release_notes.md

      - name: Create or Update Draft Release
        id: create_draft
        run: |
          # Inputs
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          NEW_TAG="v-next"
          RELEASE_NOTES_FILE="release_notes.md"

          # Check if a draft release already exists for this tag
          EXISTS=$(gh release list --limit 10 --json tagName,isDraft --jq '.[] | select(.tagName == "'$NEW_TAG'" and .isDraft == true)')

          if [[ -n "$EXISTS" ]]; then
            echo "✏️ Draft release for $NEW_TAG already exists. Updating notes..."
            
            # Update the existing draft release with the new notes
            gh release edit "$NEW_TAG" --draft --notes-file "$RELEASE_NOTES_FILE"
          else
            echo "🆕 Creating new draft release $NEW_TAG"
            
            # Create a new draft release with the generated notes
            gh release create "$NEW_TAG" \
              --target "$BETA_SHA" \
              --title "Release $NEW_TAG" \
              --draft \
              --notes-file "$RELEASE_NOTES_FILE"
          fi
      - name: do some outputs
        run: |
          echo "beta_sha output: ${{ steps.beta_sha.outputs.sha }}"
          echo "last_prod_tag output: ${{ steps.last_prod_tag.outputs.tag }}"
          echo "prod_sha output: ${{ steps.prod_sha.outputs.sha }}"
          echo "Release Notes: ${{ steps.create_draft.outputs.release_body }}"

  publish-prod-release:
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'prod' &&
      github.event.deployment_status.state == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find the Draft Release for prod
        id: find_draft_release
        run: |
          DRAFT_TAG="v-next"
          RELEASE=$(gh release view "$DRAFT_TAG" --json tagName,isDraft,body,url)
          echo "Release: $RELEASE"
          echo "::set-output name=tag_name::$(echo "$RELEASE" | jq -r '.tagName')"
          echo "::set-output name=release_url::$(echo "$RELEASE" | jq -r '.url')"
          echo "::set-output name=release_body::$(echo "$RELEASE" | jq -r '.body')"

      # - name: Add Deployment Link to Release Notes
      #   id: update_release_notes
      #   run: |
      #     # Get the link to the deployment workflow run
      #     DEPLOYMENT_URL="${{ github.event.deployment_url }}"
      #     RELEASE_BODY="${{ steps.find_draft_release.outputs.release_body }}"

      #     # Add deployment link to the notes
      #     UPDATED_BODY="${RELEASE_BODY}

      #     Deployment URL: $DEPLOYMENT_URL"

      #     # Update the draft release with the new notes
      #     NEW_TAG="v-next"
      #     gh release edit "$NEW_TAG" --draft --notes-file updated_notes.md

      - name: Rename Release
        id: rename_release
        run: |
          # Get the tag 
          DRAFT_TAG="${{ steps.find_draft_release.outputs.tag_name }}"
          NEW_TAG_N_TITLE=$(date +'%Y%m%d-%H%M%S')

          # Rename the release to include the deployment URL
          gh release edit "$DRAFT_TAG" --draft=false --title "$NEW_TAG_N_TITLE" --tag "$NEW_TAG_N_TITLE"
