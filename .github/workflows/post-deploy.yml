name: üîçPost Deployment Check

on:
  deployment_status:

# setting GH_TOKEN for the entire workflow
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write # Allows for creating/editing releases
  deployments: write # If you're using deployment tracking as well
  pull-requests: read # If working with PR data

jobs:
  generate-release-sha-diff:
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'dev' &&
      github.event.deployment_status.state == 'success'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current beta SHA
        id: beta_sha
        run: |
          echo "sha=${{ github.event.deployment.sha }}" >> "$GITHUB_OUTPUT"
          echo "id=${{ github.event.deployment.id }}"
          echo "statuses_url=${{ github.event.deployment.statuses_url }}"
          echo "ref=${{ github.event.deployment.ref }}"
          echo "environment=${{ github.event.deployment.environment }}"
          echo "description=${{ github.event.deployment.description }}"
          echo "url=${{ github.event.deployment.url }}"

      - name: Get last prod release tag
        id: last_prod_tag
        run: |
          # Get the latest published (non-draft) release tag
          tag=$(gh release list --json name,isLatest --jq '.[] | select(.isLatest)|.name')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "tag=$tag"

      - name: Resolve tag to SHA
        id: prod_sha
        run: |
          sha=$(git rev-list -n 1 ${{ steps.last_prod_tag.outputs.tag }})
          echo "sha=$sha" >> "$GITHUB_OUTPUT"
          echo "sha=$sha"

      - name: Display info (optional)
        run: |
          echo "üü¢ Last prod release: ${{ steps.last_prod_tag.outputs.tag }} -> ${{ steps.prod_sha.outputs.sha }}"
          echo "üü° Current beta SHA: ${{ steps.beta_sha.outputs.sha }}"
      - name: Get commit diffs
        id: commit_diffs
        run: |
          # Get the commit history between the last prod release and the current beta SHA
          commits=$(git log --oneline --no-merges --pretty="%H" ${{ steps.prod_sha.outputs.sha }}..${{ steps.beta_sha.outputs.sha }})

          echo "commits<<EOF" >> "$GITHUB_OUTPUT"
          echo "$commits" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "‚úÖ Found commits: $commits"

      - name: üìùGenerate and Append Release Notes
        id: generate_release_notes
        run: |
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          COMMITS=(${{ steps.commit_diffs.outputs.commits }})
          NEW_TAG="v-next"

          echo "üìå Generating release notes from $LAST_PROD_TAG to $BETA_SHA"
          RELEASE_NOTES="# Changelog from $LAST_PROD_TAG to $BETA_SHA\n\n"

          for COMMIT in "${COMMITS[@]}"; do
            echo "üîé Checking PR for commit $COMMIT"

            PR_JSON=$(gh pr list --search "$COMMIT" --state merged --json number,title,author --limit 1)

            if [[ $(echo "$PR_JSON" | jq length) -gt 0 ]]; then
              PR_NUM=$(echo "$PR_JSON" | jq -r '.[0].number')
              PR_TITLE=$(echo "$PR_JSON" | jq -r '.[0].title')
              PR_AUTHOR=$(echo "$PR_JSON" | jq -r '.[0].author.login')
              RELEASE_NOTES+="- [#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM}): ${PR_TITLE} (by @${PR_AUTHOR})\n"
            else
              COMMIT_MSG=$(git log -1 --pretty=format:"%s" "$COMMIT")
              SHORT_SHA=$(echo "$COMMIT" | cut -c1-7)
              RELEASE_NOTES+="- ${SHORT_SHA}: ${COMMIT_MSG}\n"
            fi
          done

          echo -e "$RELEASE_NOTES" > release_notes.md
          echo "üìù Generated release notes:"
          cat release_notes.md

      - name: ‚úèÔ∏èCreate or Update Draft Release
        id: create_draft
        run: |
          # Inputs
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          NEW_TAG="v-next"
          RELEASE_NOTES_FILE="release_notes.md"

          # Check if a draft release already exists for this tag
          EXISTS=$(gh release list --limit 10 --json tagName,isDraft --jq '.[] | select(.tagName == "'$NEW_TAG'" and .isDraft == true)')

          if [[ -n "$EXISTS" ]]; then
            echo "‚úèÔ∏è Draft release for $NEW_TAG already exists. Updating notes..."
            
            # Update the existing draft release with the new notes
            gh release edit "$NEW_TAG" --draft --notes-file "$RELEASE_NOTES_FILE"
          else
            echo "üÜï Creating new draft release $NEW_TAG"
            
            # Create a new draft release with the generated notes
            gh release create "$NEW_TAG" \
              --target "$BETA_SHA" \
              --title "Release $NEW_TAG" \
              --draft \
              --notes-file "$RELEASE_NOTES_FILE"
          fi

  publish-prod-release:
    # there's more that needs to be done here
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'prod' &&
      github.event.deployment_status.state == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find the Draft Release for prod
        id: find_draft_release
        run: |
          DRAFT_TAG="v-next"
          RELEASE=$(gh release view "$DRAFT_TAG" --json tagName,isDraft,body,url)
          echo "Release: $RELEASE"
          echo "::set-output name=tag_name::$(echo "$RELEASE" | jq -r '.tagName')"
          echo "::set-output name=release_url::$(echo "$RELEASE" | jq -r '.url')"
          echo "::set-output name=release_body::$(echo "$RELEASE" | jq -r '.body')"

      # we need to update the draft release one last time
      # to ensure we dont have any stale data in the release notes
      # like if someone deploys a release that isn't the latest
      # then we get stale data in the release notes

      - name: Get last deployed beta SHA
        id: last_beta_deploy
        run: |
          deployments=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "repos/kghafari/testbot/deployments?environment=dev&per_page=10")

          # Extract deployment IDs and SHAs
          deploy_info=$(echo "$deployments" | jq -c '.[] | {id: .id, sha: .sha}')

          # Loop through each deployment to check status
          while IFS= read -r deployment; do
            id=$(echo "$deployment" | jq -r '.id')
            sha=$(echo "$deployment" | jq -r '.sha')

            # Get statuses for the deployment
            statuses=$(gh api \
              -H "Accept: application/vnd.github+json" \
              "repos/kghafari/testbot/deployments/$id/statuses")

            # Check for success state
            success=$(echo "$statuses" | jq -e '.[] | select(.state == "success")' > /dev/null && echo "yes" || echo "no")

            if [ "$success" == "yes" ]; then
              echo "‚úÖ Successful deployment found!"
              break
            fi
          done <<< "$(echo "$deploy_info")"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"
          echo "sha=$sha"

      - name: Compare SHA diff
        id: compare_sha_diff
        run: |
          # Get the commit history between the last prod release and the current beta SHA
          commits=$(git log --oneline --no-merges --pretty="%H" ${{ github.event.deployment.sha }}..${{ steps.last_beta_deploy.outputs.sha }})

          echo "commits<<EOF" >> "$GITHUB_OUTPUT"
          echo "$commits" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "‚úÖ Found commits: $commits"
          echo "git log --oneline --no-merges ${{ github.event.deployment.sha }}..${{ steps.last_beta_deploy.outputs.sha }}"

      - name: üìùRegenerate and Append Release Notes
        if: ${{ steps.compare_sha_diff.outputs.commits != '' }}
        run: |
          COMMITS=(${{ steps.compare_sha_diff.outputs.commits }})
          NEW_TAG="v-next"

          # echo "üìå Generating release notes from $LAST_PROD_TAG to $BETA_SHA"
          RELEASE_NOTES="# Changelog\n\n"

          for COMMIT in "${COMMITS[@]}"; do
            echo "üîé Checking PR for commit $COMMIT"

            PR_JSON=$(gh pr list --search "$COMMIT" --state merged --json number,title,author --limit 1)

            if [[ $(echo "$PR_JSON" | jq length) -gt 0 ]]; then
              PR_NUM=$(echo "$PR_JSON" | jq -r '.[0].number')
              PR_TITLE=$(echo "$PR_JSON" | jq -r '.[0].title')
              PR_AUTHOR=$(echo "$PR_JSON" | jq -r '.[0].author.login')
              RELEASE_NOTES+="- [#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM}): ${PR_TITLE} (by @${PR_AUTHOR})\n"
            else
              COMMIT_MSG=$(git log -1 --pretty=format:"%s" "$COMMIT")
              SHORT_SHA=$(echo "$COMMIT" | cut -c1-7)
              RELEASE_NOTES+="- ${SHORT_SHA}: ${COMMIT_MSG}\n"
            fi
          done

          echo -e "$RELEASE_NOTES" > release_notes.md
          echo "üìù Generated release notes:"
          cat release_notes.md

          # Edit the existing draft release with the new notes
          gh release edit "$NEW_TAG" --draft --notes-file release_notes.md

          # Cut a new release with the changes that just went to prod
          # eh just generate notes for now ig
          NEW_TAG_N_TITLE=$(date +'%Y%m%d-%H%M%S')
          gh release create "$NEW_TAG_N_TITLE" \
            --target "${{ github.event.deployment.sha }}" \
            --title "$NEW_TAG_N_TITLE" \
            --draft=false \
            --generate-notes

        # INSERT CODE HERE

      - name: Publish Release
        if: ${{ steps.compare_sha_diff.outputs.commits == '' }}
        id: publish_release
        run: |
          # Get the tag 
          DRAFT_TAG="${{ steps.find_draft_release.outputs.tag_name }}"
          NEW_TAG_N_TITLE=$(date +'%Y%m%d-%H%M%S')

          # Use the latest commit SHA from the deployment
          LATEST_SHA="${{ github.event.deployment.sha }}"

          # Rename the release to include the deployment URL
          gh release edit "$DRAFT_TAG" \
                --draft=false \
                --title "$NEW_TAG_N_TITLE" \
                --tag "$NEW_TAG_N_TITLE" \
                --target "$LATEST_SHA"
