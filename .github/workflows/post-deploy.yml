name: 🔍Post Deployment Check

on:
  deployment_status:
# setting GH_TOKEN for the entire workflow
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write # Allows for creating/editing releases
  deployments: write # If you're using deployment tracking as well
  pull-requests: read # If working with PR data

jobs:
  generate-release-sha-diff:
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'dev' &&
      github.event.deployment_status.state == 'success'

    steps:
      - name: Echo Some Stuff
        run: |
          echo "Triggered workflow on ENV - ${{ github.event.deployment.environment }}"
          echo "Deployment state - ${{ github.event.deployment_status.state }}"
          echo "Commit: ${{ github.event.deployment.sha }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current beta SHA
        id: beta_sha
        run: |
          echo "sha=${{ github.event.deployment.sha }}" >> "$GITHUB_OUTPUT"

      - name: Get last prod release tag
        id: last_prod_tag
        run: |
          # Get the latest published (non-draft) release tag
          tag=$(gh release list --json name,isLatest --jq '.[] | select(.isLatest)|.name')
          echo "tag=$tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Resolve tag to SHA
        id: prod_sha
        run: |
          sha=$(git rev-list -n 1 ${{ steps.last_prod_tag.outputs.tag }})
          echo "sha=$sha"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Display info (optional)
        run: |
          echo "🟢 Last prod release: ${{ steps.last_prod_tag.outputs.tag }} -> ${{ steps.prod_sha.outputs.sha }}"
          echo "🟡 Current beta SHA: ${{ steps.beta_sha.outputs.sha }}"

      - name: Generate and Append Release Notes
        id: generate_release_notes
        run: |
          # Inputs
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          NEW_TAG="v-next"

          echo "📌 Generating release notes from $LAST_PROD_TAG to $BETA_SHA"

          # Generate the commit list from prod to beta (excluding the prod commit itself)
          COMMIT_LIST=$(git log --oneline --no-merges $LAST_PROD_TAG..$BETA_SHA)

          # Create a changelog based on the commit list
          RELEASE_NOTES="# Changelog from $LAST_PROD_TAG to $BETA_SHA\n\n"
          RELEASE_NOTES+="$COMMIT_LIST"

          # Save the release notes to a file for use in the release creation/update
          echo "$RELEASE_NOTES" > release_notes.md
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create or Update Draft Release
        id: create_draft
        run: |
          # Inputs
          BETA_SHA=${{ steps.beta_sha.outputs.sha }}
          LAST_PROD_TAG=${{ steps.last_prod_tag.outputs.tag }}
          NEW_TAG="v-next"
          RELEASE_NOTES_FILE="release_notes.md"

          # Check if a draft release already exists for this tag
          EXISTS=$(gh release list --limit 10 --json tagName,isDraft --jq '.[] | select(.tagName == "'$NEW_TAG'" and .isDraft == true)')

          if [[ -n "$EXISTS" ]]; then
            echo "✏️ Draft release for $NEW_TAG already exists. Updating notes..."
            
            # Update the existing draft release with the new notes
            gh release edit "$NEW_TAG" --draft --notes-file "$RELEASE_NOTES_FILE"
          else
            echo "🆕 Creating new draft release $NEW_TAG"
            
            # Create a new draft release with the generated notes
            gh release create "$NEW_TAG" \
              --target "$BETA_SHA" \
              --title "Release $NEW_TAG" \
              --draft \
              --notes-file "$RELEASE_NOTES_FILE"
          fi

  publish-prod-release:
    runs-on: ubuntu-latest
    if: >
      github.event.deployment.environment == 'prod' &&
      github.event.deployment_status.state == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find the Draft Release for prod
        id: find_draft_release
        run: |
          NEW_TAG="v-next"
          RELEASE=$(gh release view "$NEW_TAG" --json tagName,isDraft,body,url)
          echo "Release: $RELEASE"
          echo "::set-output name=release_url::$(echo "$RELEASE" | jq -r '.url')"
          echo "::set-output name=release_body::$(echo "$RELEASE" | jq -r '.body')"

      - name: Add Deployment Link to Release Notes
        id: update_release_notes
        run: |
          # Get the link to the deployment workflow run
          DEPLOYMENT_URL="${{ github.event.deployment_url }}"
          RELEASE_BODY="${{ steps.find_draft_release.outputs.release_body }}"

          # Add deployment link to the notes
          UPDATED_BODY="$RELEASE_BODY\n\nDeployment URL: $DEPLOYMENT_URL"
          echo "$UPDATED_BODY" > updated_notes.md

          # Update the draft release with the new notes
          NEW_TAG="v-next"
          gh release edit "$NEW_TAG" --draft --notes-file updated_notes.md

      - name: Generate Unique Tag and Title
        id: generate_unique_identifier
        run: |
          # Generate a unique tag and title using date and time
          UNIQUE_IDENTIFIER=$(date +'%Y%m%d-%H%M%S')
          NEW_TAG="release-${UNIQUE_IDENTIFIER}"
          RELEASE_TITLE="Release ${UNIQUE_IDENTIFIER}"
          echo "::set-output name=new_tag::$NEW_TAG"
          echo "::set-output name=release_title::$RELEASE_TITLE"

      - name: Publish Draft Release with Unique Tag and Title
        id: publish_release
        run: |
          # Get the unique tag and title from previous step
          NEW_TAG="${{ steps.generate_unique_identifier.outputs.new_tag }}"
          RELEASE_TITLE="${{ steps.generate_unique_identifier.outputs.release_title }}"

          # Publish the draft release and update the tag and title
          gh release edit "$NEW_TAG" --draft=false --title "$RELEASE_TITLE" --tag "$NEW_TAG"
